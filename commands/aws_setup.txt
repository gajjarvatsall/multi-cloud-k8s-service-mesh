# Navigate to the AWS terraform directory
cd terraform/aws

# Initialize Terraform
terraform init

# Plan the deployment (review what will be created)
terraform plan

# Apply the configuration (this will take about 10-15 minutes)
terraform apply

# Update kubeconfig
aws eks update-kubeconfig --region us-west-2 --name multi-cloud-eks

# Verify the connection
kubectl get nodes
kubectl get pods --all-namespaces

# Download and install Istio
curl -L https://istio.io/downloadIstio | sh -

# Move to a directory in your PATH (or add istio bin to PATH)
cd istio-*
export PATH=$PWD/bin:$PATH

# Verify Istio installation
istioctl version

# Install Istio with default configuration profile
istioctl install --set values.defaultRevision=default -y

# Verify Istio installation
kubectl get pods -n istio-system

# Label the default namespace for Istio injection
kubectl label namespace default istio-injection=enabled

# Create a dedicated namespace for our applications
kubectl create namespace apps
kubectl label namespace apps istio-injection=enabled

# Verify labels
kubectl get namespace -L istio-injection

# Install Kiali
kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.20/samples/addons/kiali.yaml

# Wait for Kiali to be ready
kubectl rollout status deployment/kiali -n istio-system

# Access Kiali dashboard (in a new terminal)
istioctl dashboard kiali

# Check if Istio is running
kubectl get pods -n istio-system

# Check if apps have sidecars injected
kubectl get pods -n apps

# Check if you can access the application
echo $GATEWAY_URL
curl -s "http://$GATEWAY_URL/productpage" | head -20


