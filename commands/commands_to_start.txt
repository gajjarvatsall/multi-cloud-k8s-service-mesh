# Install Helm (if not already installed)
brew install helm

# Add Prometheus community Helm repository
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update

# Create monitoring namespace
kubectl create namespace monitoring

# Install Prometheus stack (includes Grafana)
helm install prometheus prometheus-community/kube-prometheus-stack \
  --namespace monitoring \
  --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false \
  --set prometheus.prometheusSpec.retention=7d


# Create the sample apps directory structure
mkdir -p kubernetes/sample-apps

# Deploy the applications (make sure you create the YAML files above first)
kubectl apply -f kubernetes/sample-apps/

# Verify deployments
kubectl get pods -n apps
kubectl get services -n apps

# Check if Istio sidecars are injected
kubectl describe pod -n apps -l app=productpage

kubectl apply -f kubernetes/sample-apps/gateway.yaml

# Get the external IP of the Istio ingress gateway
kubectl get service istio-ingressgateway -n istio-system

# Set environment variables for the gateway
export INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')
export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT

echo "Gateway URL: http://$GATEWAY_URL/productpage"

# Test the application
curl -s "http://$GATEWAY_URL/productpage" | grep -o "<title>.*</title>"

# Install Kiali
kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.20/samples/addons/kiali.yaml

# Wait for Kiali to be ready
kubectl rollout status deployment/kiali -n istio-system

# Access Kiali dashboard (in a new terminal)
istioctl dashboard kiali

# Check if Istio is running
kubectl get pods -n istio-system

# Check if apps have sidecars injected
kubectl get pods -n apps

# Check if you can access the application
echo $GATEWAY_URL
curl -s "http://$GATEWAY_URL/productpage" | head -20

# Create a PeerAuthentication policy to enforce mTLS across the mesh
kubectl apply -f - <<EOF
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: istio-system
spec:
  mtls:
    mode: STRICT
EOF

# Verify mTLS is working
kubectl get peerauthentication -A

# Check TLS status in Kiali (you should see padlock icons on connections)
istioctl authn tls-check productpage-v1.apps.cluster.local

# Install cert-manager
kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.0/cert-manager.yaml

# Wait for cert-manager to be ready
kubectl wait --for=condition=ready pod -l app=cert-manager -n cert-manager --timeout=60s
kubectl wait --for=condition=ready pod -l app=webhook -n cert-manager --timeout=60s
kubectl wait --for=condition=ready pod -l app=cainjector -n cert-manager --timeout=60s

# Verify installation
kubectl get pods -n cert-manager

# Create security directory
mkdir -p kubernetes/security

# Apply the cluster issuers (make sure to update the email address first!)
kubectl apply -f kubernetes/security/cluster-issuer.yaml

# Verify issuers are ready
kubectl get clusterissuer

kubectl apply -f kubernetes/security/authorization-policies.yaml

# Verify policies are applied
kubectl get authorizationpolicy -n apps

# Test that the application still works with security policies
curl -s "http://$GATEWAY_URL/productpage" | grep -o "<title>.*</title>"

# Try to access details service directly (this should fail due to authorization policy)
kubectl exec -n apps deployment/productpage-v1 -c productpage -- curl -s details:9080/details/0

# Test from productpage (this should work)
kubectl exec -n apps deployment/productpage-v1 -c productpage -- curl -s details:9080/details/0

kubectl apply -f kubernetes/security/rate-limiting.yaml

kubectl apply -f kubernetes/security/network-policies.yaml

# Verify network policies
kubectl get networkpolicy -n apps

# Check mTLS status
istioctl authn tls-check productpage-v1.apps.cluster.local

# Check authorization policies
kubectl get authorizationpolicy -n apps

# Check certificates
kubectl get certificates -A

# Check if rate limiting is working (should get rate limited after 10 requests in 60s)
for i in $(seq 1 15); do
  echo "Request $i: $(curl -s -w "%{http_code}" -o /dev/null "http://$GATEWAY_URL/productpage")"
  sleep 1
done


